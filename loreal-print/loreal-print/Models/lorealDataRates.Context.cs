//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace loreal_print.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Loreal_DEVEntities6 : DbContext
    {
        public Loreal_DEVEntities6()
            : base("name=Loreal_DEVEntities6")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdType> AdTypes { get; set; }
        public virtual DbSet<BookToRateType> BookToRateTypes { get; set; }
        public virtual DbSet<EditionType> EditionTypes { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<ParentAdType> ParentAdTypes { get; set; }
        public virtual DbSet<Publisher> Publishers { get; set; }
        public virtual DbSet<RateType> RateTypes { get; set; }
        public virtual DbSet<Tier> Tiers { get; set; }
        public virtual DbSet<CirculationGuarantee> CirculationGuarantees { get; set; }
        public virtual DbSet<Circulation> Circulations { get; set; }
        public virtual DbSet<TabletRate> TabletRates { get; set; }
        public virtual DbSet<EditorialCalendar> EditorialCalendars { get; set; }
        public virtual DbSet<ProductionCostNEP> ProductionCostNEPs { get; set; }
        public virtual DbSet<PremiumDiscountRate> PremiumDiscountRates { get; set; }
        public virtual DbSet<Rate> Rates { get; set; }
    
        public virtual ObjectResult<GetRatesEndReport_Result> GetRatesEndReport(string year, Nullable<int> bookID, Nullable<int> versionID)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var versionIDParameter = versionID.HasValue ?
                new ObjectParameter("VersionID", versionID) :
                new ObjectParameter("VersionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRatesEndReport_Result>("GetRatesEndReport", yearParameter, bookIDParameter, versionIDParameter);
        }
    
        public virtual ObjectResult<GetCirculation_Result> GetCirculation(string year, Nullable<int> bookID, Nullable<int> versionID)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var versionIDParameter = versionID.HasValue ?
                new ObjectParameter("VersionID", versionID) :
                new ObjectParameter("VersionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCirculation_Result>("GetCirculation", yearParameter, bookIDParameter, versionIDParameter);
        }
    
        public virtual ObjectResult<GetRates_Result> GetRates(string year, Nullable<int> bookID, Nullable<int> versionID)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var versionIDParameter = versionID.HasValue ?
                new ObjectParameter("VersionID", versionID) :
                new ObjectParameter("VersionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRates_Result>("GetRates", yearParameter, bookIDParameter, versionIDParameter);
        }
    
        public virtual ObjectResult<GetTabletRates_Result> GetTabletRates(string year, Nullable<int> bookID, Nullable<int> versionID)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var versionIDParameter = versionID.HasValue ?
                new ObjectParameter("VersionID", versionID) :
                new ObjectParameter("VersionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTabletRates_Result>("GetTabletRates", yearParameter, bookIDParameter, versionIDParameter);
        }
    
        public virtual ObjectResult<string> ValidateAllInputs(Nullable<int> year, Nullable<int> bookID, Nullable<int> versionID)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var versionIDParameter = versionID.HasValue ?
                new ObjectParameter("VersionID", versionID) :
                new ObjectParameter("VersionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ValidateAllInputs", yearParameter, bookIDParameter, versionIDParameter);
        }
    }
}
